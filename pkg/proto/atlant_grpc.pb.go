// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AtlantServiceClient is the client API for AtlantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AtlantServiceClient interface {
	Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (AtlantService_FetchClient, error)
	List(ctx context.Context, in *Page, opts ...grpc.CallOption) (*Products, error)
}

type atlantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAtlantServiceClient(cc grpc.ClientConnInterface) AtlantServiceClient {
	return &atlantServiceClient{cc}
}

func (c *atlantServiceClient) Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (AtlantService_FetchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AtlantService_serviceDesc.Streams[0], "/proto.AtlantService/Fetch", opts...)
	if err != nil {
		return nil, err
	}
	x := &atlantServiceFetchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AtlantService_FetchClient interface {
	Recv() (*FetchState, error)
	grpc.ClientStream
}

type atlantServiceFetchClient struct {
	grpc.ClientStream
}

func (x *atlantServiceFetchClient) Recv() (*FetchState, error) {
	m := new(FetchState)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *atlantServiceClient) List(ctx context.Context, in *Page, opts ...grpc.CallOption) (*Products, error) {
	out := new(Products)
	err := c.cc.Invoke(ctx, "/proto.AtlantService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AtlantServiceServer is the server API for AtlantService service.
// All implementations must embed UnimplementedAtlantServiceServer
// for forward compatibility
type AtlantServiceServer interface {
	Fetch(*FetchRequest, AtlantService_FetchServer) error
	List(context.Context, *Page) (*Products, error)
	mustEmbedUnimplementedAtlantServiceServer()
}

// UnimplementedAtlantServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAtlantServiceServer struct {
}

func (UnimplementedAtlantServiceServer) Fetch(*FetchRequest, AtlantService_FetchServer) error {
	return status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedAtlantServiceServer) List(context.Context, *Page) (*Products, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAtlantServiceServer) mustEmbedUnimplementedAtlantServiceServer() {}

// UnsafeAtlantServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AtlantServiceServer will
// result in compilation errors.
type UnsafeAtlantServiceServer interface {
	mustEmbedUnimplementedAtlantServiceServer()
}

func RegisterAtlantServiceServer(s grpc.ServiceRegistrar, srv AtlantServiceServer) {
	s.RegisterService(&_AtlantService_serviceDesc, srv)
}

func _AtlantService_Fetch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AtlantServiceServer).Fetch(m, &atlantServiceFetchServer{stream})
}

type AtlantService_FetchServer interface {
	Send(*FetchState) error
	grpc.ServerStream
}

type atlantServiceFetchServer struct {
	grpc.ServerStream
}

func (x *atlantServiceFetchServer) Send(m *FetchState) error {
	return x.ServerStream.SendMsg(m)
}

func _AtlantService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Page)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlantServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AtlantService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlantServiceServer).List(ctx, req.(*Page))
	}
	return interceptor(ctx, in, info, handler)
}

var _AtlantService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AtlantService",
	HandlerType: (*AtlantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _AtlantService_List_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Fetch",
			Handler:       _AtlantService_Fetch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/proto/atlant.proto",
}
